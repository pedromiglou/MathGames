{"ast":null,"code":"var _jsxFileName = \"/home/diogo/Desktop/3\\xBA Ano/PI/pi_mathgames/WebApp/mathgames_app/src/Components/Engines/RastrosEngine.js\";\nimport React from \"react\";\nimport Phaser from \"phaser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar game_type = null;\nexport default class RastrosEngine extends React.Component {\n  constructor(props) {\n    super(props);\n    game_type = props.game_type;\n  }\n\n  componentDidMount() {\n    let canvasobj = document.getElementById(\"game_canvas\");\n    canvasobj.style.border = \"20px solid black\";\n    const config = {\n      canvas: canvasobj,\n      type: Phaser.WEBGL,\n      autoCenter: Phaser.Scale.CENTER_HORIZONTALLY,\n      width: 1100,\n      height: 750,\n      backgroundColor: '#4488aa',\n      scene: {\n        preload: this.preload,\n        create: this.create,\n        update: this.update\n      }\n    };\n    new Phaser.Game(config);\n  }\n\n  preload() {\n    this.load.image('square', process.env.PUBLIC_URL + '/game_assets/rastros/square.png');\n    this.load.image('p1', process.env.PUBLIC_URL + '/game_assets/rastros/p1.png');\n    this.load.image('p2', process.env.PUBLIC_URL + '/game_assets/rastros/p2.png');\n    this.load.image('piece', process.env.PUBLIC_URL + '/game_assets/rastros/piece.png');\n    this.load.image('blocked', process.env.PUBLIC_URL + '/game_assets/rastros/blocked.png');\n    this.load.audio('click', [process.env.PUBLIC_URL + '/game_assets/rastros/move.wav']);\n  }\n\n  create() {\n    this.INITIAL_BOARD_POS = 60;\n    this.DISTANCE_BETWEEN_SQUARES = 105; // Sound effect played after every move\n\n    this.move_sound = this.sound.add('click', {\n      volume: 0.2\n    }); // Array that stores the board's clickable positions\n\n    this.positions = []; // Player which is currently playing (1 or 2)\n\n    this.current_player = 1; // True if it's a player's turn, False if it's the AI's turn\n\n    this.player_turn = true; // True if the player's last click was the moving piece, false otherwise\n\n    var clicked_piece_flag = false; // Squares which have been blocked\n\n    var blocked_squares = new Set(); // Squares to where the moving piece can currently move\n\n    var valid_squares = new Set([\"10\", \"11\", \"12\", \"17\", \"19\", \"24\", \"25\", \"26\"]); // Positions referencing the last movement made\n\n    var last_played = new Set(); // Loop used to fill the board with clickable squares\n\n    for (var pos_y = 0; pos_y < 7; pos_y++) {\n      for (var pos_x = 0; pos_x < 7; pos_x++) {\n        var pos = pos_y * 7 + pos_x;\n        if (pos === 6) this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_x, this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_y, 'p2').setName(String(pos)).setInteractive());else if (pos === 42) this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_x, this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_y, 'p1').setName(String(pos)).setInteractive());else this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_x, this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * pos_y, 'square').setName(String(pos)).setInteractive());\n      }\n    }\n\n    console.log(this.positions); // Fill in the moving piece\n\n    var player_piece = this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * 4, this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES * 2, 'piece').setName('player_piece').setInteractive();\n    this.add.text(750 + 20, 60, \"ร a vez do jogador:\", {\n      font: \"40px Impact\",\n      color: \"Orange\"\n    });\n    var current_player_text = this.add.text(750 + 95, 120, \"Jogador \" + this.current_player, {\n      font: \"40px Impact\",\n      color: \"Orange\"\n    }); // Triggered when the player clicks\n\n    this.input.on('pointerdown', function (pointer, currentlyOver) {\n      var clicked_piece = currentlyOver[0];\n      if (clicked_piece !== undefined && this.player_turn) if (clicked_piece.name === \"player_piece\") {\n        if (!clicked_piece_flag) {\n          clicked_piece_flag = true;\n          valid_squares.forEach(square => this.positions[square].setTint(0x00FF00));\n        } else {\n          clicked_piece_flag = false;\n          valid_squares.forEach(square => this.positions[square].clearTint());\n        }\n      } else if (clicked_piece_flag) {\n        clicked_piece_flag = false;\n        valid_squares.forEach(square => this.positions[square].clearTint());\n        if (!valid_squares.has(clicked_piece.name)) return;\n        var is_finished = move(this, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece);\n\n        if (game_type === \"AI\" && !is_finished) {\n          this.player_turn = false; // Process AI move\n\n          var ai_move = randomPlay(valid_squares);\n          clicked_piece = this.positions[ai_move];\n          var wait_time = Math.floor(Math.random() * (2000 - 500)) + 500;\n          setTimeout(() => {\n            move(this, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece);\n            this.player_turn = true;\n          }, wait_time);\n        }\n      }\n    }, this);\n  }\n\n  update() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"game_canvas\",\n      className: \"game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction move_image(scene, image, new_x, new_y) {\n  scene.add.image(image.x, image.y, 'blocked').setName('blocked');\n  image.setPosition(new_x, new_y);\n}\n\nfunction move(scene, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece) {\n  if (valid_squares.has(clicked_piece.name)) {\n    scene.move_sound.play(); // Update blocked squares\n\n    var old_x = (player_piece.x - scene.INITIAL_BOARD_POS) / scene.DISTANCE_BETWEEN_SQUARES;\n    var old_y = (player_piece.y - scene.INITIAL_BOARD_POS) / scene.DISTANCE_BETWEEN_SQUARES;\n    blocked_squares.add(String(old_y * 7 + old_x)); // Remove last movement highlight and add new one\n\n    last_played.forEach(pos => scene.positions[pos].clearTint());\n    last_played.clear();\n    last_played.add(old_y * 7 + old_x);\n    last_played.add(parseInt(clicked_piece.name));\n    last_played.forEach(pos => scene.positions[pos].setTint(0xFFFF00)); // Move player piece to new square\n\n    move_image(scene, player_piece, clicked_piece.x, clicked_piece.y); // Get new square's position [0..49]\n\n    var current_pos = parseInt(clicked_piece.name);\n    valid_squares.clear(); // Add all possible positions\n\n    valid_squares.add(String(current_pos - 6));\n    valid_squares.add(String(current_pos - 7));\n    valid_squares.add(String(current_pos - 8));\n    valid_squares.add(String(current_pos + 6));\n    valid_squares.add(String(current_pos + 7));\n    valid_squares.add(String(current_pos + 8));\n    valid_squares.add(String(current_pos - 1));\n    valid_squares.add(String(current_pos + 1)); // Remove invalid squares (edge cases)\n\n    if ([0, 1, 2, 3, 4, 5, 6].includes(current_pos)) {\n      valid_squares.delete(String(current_pos - 6));\n      valid_squares.delete(String(current_pos - 7));\n      valid_squares.delete(String(current_pos - 8));\n    }\n\n    if ([42, 43, 44, 45, 46, 47, 48].includes(current_pos)) {\n      valid_squares.delete(String(current_pos + 6));\n      valid_squares.delete(String(current_pos + 7));\n      valid_squares.delete(String(current_pos + 8));\n    }\n\n    if ([0, 7, 14, 21, 28, 35, 42].includes(current_pos)) {\n      valid_squares.delete(String(current_pos - 8));\n      valid_squares.delete(String(current_pos - 1));\n      valid_squares.delete(String(current_pos + 6));\n    }\n\n    if ([6, 13, 20, 27, 34, 41, 48].includes(current_pos)) {\n      valid_squares.delete(String(current_pos - 6));\n      valid_squares.delete(String(current_pos + 1));\n      valid_squares.delete(String(current_pos + 8));\n    } // Remove blocked squares\n\n\n    blocked_squares.forEach(square => valid_squares.delete(square)); // Check for win conditions\n\n    if (current_pos === 6 || current_pos === 42 || set_diff(valid_squares, blocked_squares).size === 0) {\n      finish_game(scene, current_pos);\n      valid_squares.clear();\n      return true;\n    } else {\n      if (scene.current_player === 1) scene.current_player = 2;else scene.current_player = 1;\n      current_player_text.setText(\"Jogador \" + scene.current_player);\n    }\n  }\n\n  return false;\n}\n\nfunction set_diff(a, b) {\n  return new Set([...a].filter(x => !b.has(x)));\n}\n\nfunction finish_game(scene, current_pos) {\n  if (current_pos === 42) var winner = 1;else if (current_pos === 6) winner = 2;else winner = scene.current_player;\n  scene.text = scene.add.text(0, 0, \"O jogador \" + winner + \" ganhou.\", {\n    font: \"80px Impact\",\n    color: \"Red\"\n  });\n  scene.tweens.add({\n    targets: scene.text,\n    x: 230,\n    y: 270,\n    durations: 2000,\n    ease: \"Elastic\",\n    easeParams: [1.5, 0.5],\n    delay: 0\n  }, scene);\n  scene.positions.forEach(x => x.disableInteractive());\n}\n\nfunction randomPlay(validSquares) {\n  var tmpSquares = Array.from(validSquares).map(x => [(parseInt(x) - parseInt(x) % 7) / 7, parseInt(x) % 7]);\n  var chosen = tmpSquares.reduce((accumulator, current) => {\n    if (Math.pow(accumulator[0] - 0, 2) + Math.pow(accumulator[1] - 6, 2) < Math.pow(current[0] - 0, 2) + Math.pow(current[1] - 6, 2)) {\n      return accumulator;\n    } else {\n      return current;\n    }\n  });\n  return chosen[0] * 7 + chosen[1];\n}","map":{"version":3,"sources":["/home/diogo/Desktop/3ยบ Ano/PI/pi_mathgames/WebApp/mathgames_app/src/Components/Engines/RastrosEngine.js"],"names":["React","Phaser","game_type","RastrosEngine","Component","constructor","props","componentDidMount","canvasobj","document","getElementById","style","border","config","canvas","type","WEBGL","autoCenter","Scale","CENTER_HORIZONTALLY","width","height","backgroundColor","scene","preload","create","update","Game","load","image","process","env","PUBLIC_URL","audio","INITIAL_BOARD_POS","DISTANCE_BETWEEN_SQUARES","move_sound","sound","add","volume","positions","current_player","player_turn","clicked_piece_flag","blocked_squares","Set","valid_squares","last_played","pos_y","pos_x","pos","push","setName","String","setInteractive","console","log","player_piece","text","font","color","current_player_text","input","on","pointer","currentlyOver","clicked_piece","undefined","name","forEach","square","setTint","clearTint","has","is_finished","move","ai_move","randomPlay","wait_time","Math","floor","random","setTimeout","render","move_image","new_x","new_y","x","y","setPosition","play","old_x","old_y","clear","parseInt","current_pos","includes","delete","set_diff","size","finish_game","setText","a","b","filter","winner","tweens","targets","durations","ease","easeParams","delay","disableInteractive","validSquares","tmpSquares","Array","from","map","chosen","reduce","accumulator","current","pow"],"mappings":"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","sourcesContent":["\nimport  React from \"react\";\nimport Phaser from \"phaser\";\n\nvar game_type = null\n\nexport default class RastrosEngine extends React.Component {\n    constructor(props)  {\n        super(props)\n        game_type = props.game_type\n    }\n\n    componentDidMount() {\n\n        let canvasobj = document.getElementById(\"game_canvas\");\n        canvasobj.style.border = \"20px solid black\";\n\n        const config = {\n            canvas: canvasobj,\n            type: Phaser.WEBGL,\n            autoCenter: Phaser.Scale.CENTER_HORIZONTALLY,\n            width: 1100,\n            height: 750,\n            backgroundColor: '#4488aa',\n            scene: {\n                preload: this.preload,\n                create: this.create,\n                update: this.update\n            }\n        }\n        new Phaser.Game(config);\n    }\n\n    preload() {\n        this.load.image('square', process.env.PUBLIC_URL + '/game_assets/rastros/square.png');\n        this.load.image('p1', process.env.PUBLIC_URL + '/game_assets/rastros/p1.png');\n        this.load.image('p2', process.env.PUBLIC_URL + '/game_assets/rastros/p2.png');\n        this.load.image('piece', process.env.PUBLIC_URL + '/game_assets/rastros/piece.png');\n        this.load.image('blocked', process.env.PUBLIC_URL + '/game_assets/rastros/blocked.png');\n        this.load.audio('click', [process.env.PUBLIC_URL + '/game_assets/rastros/move.wav']);\n    }\n    \n    create() {\n        this.INITIAL_BOARD_POS = 60\n        this.DISTANCE_BETWEEN_SQUARES = 105\n        // Sound effect played after every move\n        this.move_sound = this.sound.add('click', {volume: 0.2});\n        // Array that stores the board's clickable positions\n        this.positions = []\n        // Player which is currently playing (1 or 2)\n        this.current_player = 1;\n        // True if it's a player's turn, False if it's the AI's turn\n        this.player_turn = true;\t\t\n        // True if the player's last click was the moving piece, false otherwise\n        var clicked_piece_flag = false\n        // Squares which have been blocked\n        var blocked_squares = new Set()\n        // Squares to where the moving piece can currently move\n        var valid_squares = new Set([\"10\", \"11\", \"12\", \"17\", \"19\", \"24\", \"25\", \"26\"])\n        // Positions referencing the last movement made\n        var last_played = new Set()\n    \n        // Loop used to fill the board with clickable squares\n        for (var pos_y = 0; pos_y < 7; pos_y++) {\n            for (var pos_x = 0; pos_x < 7; pos_x++) {\n                var pos = pos_y*7+pos_x;\n                if (pos === 6)\n                    this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES*pos_x, this.INITIAL_BOARD_POS+this.DISTANCE_BETWEEN_SQUARES*pos_y, 'p2').setName(String(pos)).setInteractive());\n                else if (pos === 42)\n                    this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES*pos_x, this.INITIAL_BOARD_POS+this.DISTANCE_BETWEEN_SQUARES*pos_y, 'p1').setName(String(pos)).setInteractive());\n                else\n                    this.positions.push(this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES*pos_x, this.INITIAL_BOARD_POS+this.DISTANCE_BETWEEN_SQUARES*pos_y, 'square').setName(String(pos)).setInteractive());\n            }\n        }\n        \n        console.log(this.positions)\n\n\n        // Fill in the moving piece\n        var player_piece = this.add.image(this.INITIAL_BOARD_POS + this.DISTANCE_BETWEEN_SQUARES*4, this.INITIAL_BOARD_POS+this.DISTANCE_BETWEEN_SQUARES*2, 'piece').setName('player_piece').setInteractive();\n    \n        this.add.text(750+20, 60, \"ร a vez do jogador:\", {font: \"40px Impact\", color: \"Orange\"});\n        var current_player_text = this.add.text(750+95, 120, \"Jogador \" + this.current_player, {font: \"40px Impact\", color: \"Orange\"});\n\n        // Triggered when the player clicks\n        this.input.on('pointerdown', function(pointer, currentlyOver) {\n            var clicked_piece = currentlyOver[0];\n            if ( clicked_piece !== undefined  && this.player_turn)\n                if (clicked_piece.name === \"player_piece\") {\n                    if (!clicked_piece_flag) {\n                        clicked_piece_flag = true;\n                        valid_squares.forEach(square => this.positions[square].setTint(0x00FF00));\n                    } else {\n                        clicked_piece_flag = false;\n                        valid_squares.forEach(square => this.positions[square].clearTint());\n                    }\n                } else if ( clicked_piece_flag ) {\n                    clicked_piece_flag = false;\n                    valid_squares.forEach(square => this.positions[square].clearTint());\n\n                    if ( !valid_squares.has(clicked_piece.name) )\n                        return;\n\n                    var is_finished = move(this, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece);\n\n                    if ( game_type === \"AI\" && !is_finished ) {\n                        this.player_turn = false;\n                        \n                        // Process AI move\n                        var ai_move = randomPlay(valid_squares);\n                        clicked_piece = this.positions[ai_move];\n                        var wait_time =  Math.floor(Math.random() * (2000 - 500) ) + 500;\n                        setTimeout(() => {move(this, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece); this.player_turn = true;}, wait_time);\n                    }\n                }\n        }, this);\n    }\n    \n    update() {}\n\n    render() {\n        return (\n            <canvas id=\"game_canvas\" className=\"game\"/>\n        );\n    }\n}\n\nfunction move_image(scene, image, new_x, new_y) {\n    scene.add.image(image.x, image.y, 'blocked').setName('blocked');\n    image.setPosition(new_x, new_y);\n}\n\nfunction move(scene, blocked_squares, clicked_piece, current_player_text, last_played, valid_squares, player_piece) {\n    if ( valid_squares.has(clicked_piece.name) ) {\n        scene.move_sound.play();\n\n        // Update blocked squares\n        var old_x = ( player_piece.x - scene.INITIAL_BOARD_POS )/ scene.DISTANCE_BETWEEN_SQUARES;\n        var old_y = ( player_piece.y - scene.INITIAL_BOARD_POS )/ scene.DISTANCE_BETWEEN_SQUARES;\n        blocked_squares.add(String(old_y*7+old_x));\n\n        // Remove last movement highlight and add new one\n        last_played.forEach( pos => scene.positions[pos].clearTint() );\n        last_played.clear();\n        last_played.add( old_y*7 + old_x );\n        last_played.add( parseInt(clicked_piece.name) );\n        last_played.forEach( pos =>  scene.positions[pos].setTint(0xFFFF00) );\n\n        // Move player piece to new square\n        move_image(scene, player_piece, clicked_piece.x, clicked_piece.y);\n        \n        // Get new square's position [0..49]\n        var current_pos = parseInt(clicked_piece.name)\n        valid_squares.clear()\n\n        // Add all possible positions\n        valid_squares.add(String(current_pos-6));\n        valid_squares.add(String(current_pos-7));\n        valid_squares.add(String(current_pos-8));\n\n        valid_squares.add(String(current_pos+6));\n        valid_squares.add(String(current_pos+7));\n        valid_squares.add(String(current_pos+8));\n\n        valid_squares.add(String(current_pos-1));\n        valid_squares.add(String(current_pos+1));\n        \n        // Remove invalid squares (edge cases)\n        if ( [0,1,2,3,4,5,6].includes(current_pos) ) {\n            valid_squares.delete(String(current_pos-6));\n            valid_squares.delete(String(current_pos-7));\n            valid_squares.delete(String(current_pos-8));\n        }\n\n        if ( [42,43,44,45,46,47,48].includes(current_pos) ) {\n            valid_squares.delete(String(current_pos+6));\n            valid_squares.delete(String(current_pos+7));\n            valid_squares.delete(String(current_pos+8));\n        }\n\n        if ( [0,7,14,21,28,35,42].includes(current_pos) ) {\n            valid_squares.delete(String(current_pos-8));\n            valid_squares.delete(String(current_pos-1));\n            valid_squares.delete(String(current_pos+6));\n        }\n\n        if ( [6,13,20,27,34,41,48].includes(current_pos) ) {\n            valid_squares.delete(String(current_pos-6));\n            valid_squares.delete(String(current_pos+1));\n            valid_squares.delete(String(current_pos+8));\n        }\n\n        // Remove blocked squares\n        blocked_squares.forEach(square => valid_squares.delete(square));\n\n        // Check for win conditions\n        if (current_pos === 6 || current_pos === 42 || set_diff(valid_squares, blocked_squares).size === 0) {\n            finish_game(scene, current_pos);\n            valid_squares.clear();\n            return true;\n        }   else {\n            if (scene.current_player===1)\n                scene.current_player=2;\n            else\n                scene.current_player=1;\n            \n            current_player_text.setText(\"Jogador \" + scene.current_player);\n        }\n    }\n    return false;\n}\n\n\nfunction set_diff(a, b) {\n    return new Set( [...a].filter(x => !b.has(x)) )\n}\n\nfunction finish_game(scene, current_pos) {\n    if (current_pos === 42)\n        var winner = 1\n    else if (current_pos === 6)\n        winner = 2\n    else\n        winner = scene.current_player\n\n    scene.text = scene.add.text(0, 0, \"O jogador \" + winner + \" ganhou.\", {font: \"80px Impact\", color: \"Red\"});\n    scene.tweens.add ({\n        targets: scene.text,\n        x: 230,\n        y: 270,\n        durations: 2000,\n        ease: \"Elastic\",\n        easeParams: [1.5, 0.5],\n        delay: 0\n    }, scene);\n    scene.positions.forEach(x => x.disableInteractive());\n}\n\nfunction randomPlay(validSquares) {\n    var tmpSquares = Array.from(validSquares).map(x => [(parseInt(x)-(parseInt(x)%7))/7, parseInt(x)%7]);\n    var chosen = tmpSquares.reduce((accumulator, current) => {\n        if (Math.pow(accumulator[0]-0, 2) + Math.pow(accumulator[1] - 6, 2) < Math.pow(current[0]-0, 2) + Math.pow(current[1] - 6, 2)) {\n            return accumulator;\n        } else {\n            return current;\n        }\n    });\n    return chosen[0]*7+chosen[1];\n}\n\n"]},"metadata":{},"sourceType":"module"}