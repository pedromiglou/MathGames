{"ast":null,"code":"var _jsxFileName = \"/home/diogo/Desktop/3\\xBA Ano/PI/pi_mathgames/WebApp/mathgames_app/src/Components/Engines/GatosCaesEngine.js\";\nimport React from \"react\";\nimport Phaser from \"phaser\"; //var game_type = null\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class GatosCaesEngine extends React.Component {\n  // constructor(props)  {\n  //     super(props)\n  //     //game_type = props.game_type\n  // }\n  componentDidMount() {\n    let canvasobj = document.getElementById(\"game_canvas\");\n    const config = {\n      canvas: canvasobj,\n      type: Phaser.WEBGL,\n      width: 1100,\n      height: 855,\n      backgroundColor: '#4488aa',\n      scene: {\n        preload: this.preload,\n        create: this.create,\n        update: this.update\n      }\n    };\n    new Phaser.Game(config);\n  }\n\n  preload() {\n    this.load.image('square', process.env.PUBLIC_URL + '/game_assets/gatos_caes/square.png');\n    this.load.spritesheet('cat_dog', process.env.PUBLIC_URL + '/game_assets/gatos_caes/cat_dog.png', {\n      frameWidth: 100,\n      frameHeight: 100\n    });\n    this.load.image('center', process.env.PUBLIC_URL + '/game_assets/gatos_caes/center_square.png');\n    this.load.audio('click', [process.env.PUBLIC_URL + '/game_assets/rastros/move.wav']);\n  }\n\n  create() {\n    var INITIAL_BOARD_POS = 60;\n    var DISTANCE_BETWEEN_SQUARES = 105; // Sound effect played after every move\n\n    this.move_sound = this.sound.add('click', {\n      volume: 0.2\n    }); // Array that stores the board's clickable positions\n\n    var positions = []; // Player which is currently playing (0 or 1)\n\n    this.current_player = 0;\n    this.player_0_valid_squares = new Set();\n    this.player_1_valid_squares = new Set();\n    var player_0_first_move = true;\n    var player_1_first_move = true;\n    var adjacents = new Set(); // Loop used to fill the board with clickable squares\n\n    for (var pos_y = 0; pos_y < 8; pos_y++) {\n      for (var pos_x = 0; pos_x < 8; pos_x++) {\n        var pos = pos_y * 8 + pos_x;\n        this.player_0_valid_squares.add(String(pos));\n        this.player_1_valid_squares.add(String(pos));\n\n        if ([27, 28, 35, 36].includes(pos)) {\n          positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_x, INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_y, 'square').setName(String(pos)).setInteractive());\n          positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_x, INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_y, 'center').setName(String(pos)).setInteractive());\n        } else {\n          positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_x, INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES * pos_y, 'square').setName(String(pos)).setInteractive());\n        }\n      }\n    }\n\n    this.add.text(750 + 20, 60, \"Ã‰ a vez do jogador:\", {\n      font: \"40px Impact\",\n      color: \"Orange\"\n    });\n    var current_player_text = this.add.text(750 + 95, 120, \"Jogador \" + this.current_player, {\n      font: \"40px Impact\",\n      color: \"Orange\"\n    }); // Triggered when the player clicks\n\n    this.input.on('pointerdown', function (pointer, currentlyOver) {\n      var clicked_piece = currentlyOver[0];\n\n      if (clicked_piece === undefined) {\n        return;\n      }\n\n      if (player_0_first_move && this.current_player === 0) {\n        if ([\"27\", \"28\", \"35\", \"36\"].includes(clicked_piece.name)) {\n          player_0_first_move = false;\n          move(this, adjacents, clicked_piece, current_player_text);\n        }\n      } else if (player_1_first_move && this.current_player === 1) {\n        if (![\"27\", \"28\", \"35\", \"36\"].includes(clicked_piece.name)) {\n          player_1_first_move = false;\n          move(this, adjacents, clicked_piece, current_player_text);\n        }\n      } else if (!(player_1_first_move && player_0_first_move)) {\n        move(this, adjacents, clicked_piece, current_player_text);\n      }\n    }, this);\n  }\n\n  update() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"game_canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction move(scene, adjacents, clicked_piece, current_player_text) {\n  if (scene.player_0_valid_squares.has(clicked_piece.name) && scene.current_player === 0 || scene.player_1_valid_squares.has(clicked_piece.name) && scene.current_player === 1) {\n    scene.move_sound.play(); // Get new square's position [0..49]\n\n    var current_pos = parseInt(clicked_piece.name);\n    adjacents.clear();\n    scene.player_0_valid_squares.delete(String(current_pos));\n    scene.player_1_valid_squares.delete(String(current_pos));\n    adjacents.add(String(current_pos - 1));\n    adjacents.add(String(current_pos + 1));\n    adjacents.add(String(current_pos - 8));\n    adjacents.add(String(current_pos + 8)); // Remove invalid squares (edge cases)\n\n    if ([0, 1, 2, 3, 4, 5, 6, 7].includes(current_pos)) {\n      adjacents.delete(String(current_pos - 8));\n    }\n\n    if ([56, 57, 58, 59, 60, 61, 62, 63].includes(current_pos)) {\n      adjacents.delete(String(current_pos + 8));\n    }\n\n    if ([0, 8, 16, 24, 32, 40, 48, 56].includes(current_pos)) {\n      adjacents.delete(String(current_pos - 1));\n    }\n\n    if ([7, 15, 23, 31, 39, 47, 55].includes(current_pos)) {\n      adjacents.delete(String(current_pos + 1));\n    } // Add player piece to new square\n\n\n    scene.add.sprite(clicked_piece.x, clicked_piece.y, 'cat_dog', scene.current_player);\n\n    if (scene.current_player === 0) {\n      scene.player_1_valid_squares = set_diff(scene.player_1_valid_squares, adjacents);\n\n      if (scene.player_1_valid_squares.size === 0) {\n        finish_game(scene);\n      }\n    } else {\n      scene.player_0_valid_squares = set_diff(scene.player_0_valid_squares, adjacents);\n\n      if (scene.player_0_valid_squares.size === 0) {\n        finish_game(scene);\n      }\n    }\n\n    scene.current_player = 1 - scene.current_player;\n    current_player_text.setText(\"Jogador \" + scene.current_player);\n  }\n}\n\nfunction set_diff(a, b) {\n  var c = new Set([...a].filter(x => !b.has(x)));\n  return c;\n}\n\nfunction finish_game(scene) {\n  var winner = scene.current_player;\n  scene.text = scene.add.text(0, 0, \"O jogador \" + winner + \" ganhou.\", {\n    font: \"80px Impact\",\n    color: \"Red\"\n  });\n  scene.tweens.add({\n    targets: scene.text,\n    x: 230,\n    y: 270,\n    durations: 2000,\n    ease: \"Elastic\",\n    easeParams: [1.5, 0.5],\n    delay: 0\n  }, scene);\n}\n/*\n\nfunction AI_move(scene, valid_squares, player_piece, blocked_squares, clicked_piece, last_played, positions, current_player_text) {\n    var INITIAL_BOARD_POS = 60\n\tvar DISTANCE_BETWEEN_SQUARES = 105\n    var AI_square = randomPlay(valid_squares)\n    var poslist = [(AI_square-(AI_square%7))/7, AI_square%7]\n    var pos_x = INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*poslist[1]\n    var pos_y = INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*poslist[0]\n\n    // Update blocked squares\n    var old_x = (player_piece.x-INITIAL_BOARD_POS)/ DISTANCE_BETWEEN_SQUARES;\n    var old_y = (player_piece.y-INITIAL_BOARD_POS)/ DISTANCE_BETWEEN_SQUARES;\n    blocked_squares.add(String(old_y*7+old_x));\n\n    // Remove last movement highlight and add new one\n    last_played.forEach(pos =>  positions[pos].clearTint());\n    last_played.clear();\n    last_played.add(old_y*7+old_x);\n    last_played.add(parseInt(clicked_piece.name));\n    last_played.forEach(pos =>  positions[pos].setTint(0xFFFF00));\n\n    // Move player piece to new square\n    move_image(scene, player_piece, pos_x, pos_y);\n\n    \n    // Get new square's position [0..49]\n    var current_pos = parseInt(AI_square)\n    valid_squares.clear()\n\n    // Add all possible positions\n    valid_squares.add(String(current_pos-6));\n    valid_squares.add(String(current_pos-7));\n    valid_squares.add(String(current_pos-8));\n\n    valid_squares.add(String(current_pos+6));\n    valid_squares.add(String(current_pos+7));\n    valid_squares.add(String(current_pos+8));\n\n    valid_squares.add(String(current_pos-1));\n    valid_squares.add(String(current_pos+1));\n    \n    // Remove invalid squares (edge cases)\n    if ( [0,1,2,3,4,5,6].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-6));\n        valid_squares.delete(String(current_pos-7));\n        valid_squares.delete(String(current_pos-8));\n    }\n\n    if ( [42,43,44,45,46,47,48].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos+6));\n        valid_squares.delete(String(current_pos+7));\n        valid_squares.delete(String(current_pos+8));\n    }\n\n    if ( [0,7,14,21,28,35,42].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-8));\n        valid_squares.delete(String(current_pos-1));\n        valid_squares.delete(String(current_pos+6));\n    }\n\n    if ( [6,13,20,27,34,41,48].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-6));\n        valid_squares.delete(String(current_pos+1));\n        valid_squares.delete(String(current_pos+8));\n    }\n\n    // Remove blocked squares\n    blocked_squares.forEach(square => valid_squares.delete(square));\n\n    // Check for win conditions\n    if (current_pos === 6 || current_pos === 42 || set_diff(valid_squares, blocked_squares).size === 0) {\n        finish_game(scene, current_pos);\n        valid_squares.clear();\n    } else {\n        if (scene.current_player===1)\n            scene.current_player=2;\n        else\n            scene.current_player=1;\n        \n        current_player_text.setText(\"Jogador \" + scene.current_player);\n    }\n}\n\nfunction randomPlay(validSquares) {\n    var tmpSquares = Array.from(validSquares).map(x => [(parseInt(x)-(parseInt(x)%7))/7, parseInt(x)%7]);\n    var chosen = tmpSquares.reduce((accumulator, current) => {\n        if (Math.pow(accumulator[0]-0, 2) + Math.pow(accumulator[1] - 6, 2) < Math.pow(current[0]-0, 2) + Math.pow(current[1] - 6, 2)) {\n            return accumulator;\n        } else {\n            return current;\n        }\n    });\n   // this.fieldUpdate(chosen);\n    return chosen[0]*7+chosen[1];\n}\n\n*/","map":{"version":3,"sources":["/home/diogo/Desktop/3Âº Ano/PI/pi_mathgames/WebApp/mathgames_app/src/Components/Engines/GatosCaesEngine.js"],"names":["React","Phaser","GatosCaesEngine","Component","componentDidMount","canvasobj","document","getElementById","config","canvas","type","WEBGL","width","height","backgroundColor","scene","preload","create","update","Game","load","image","process","env","PUBLIC_URL","spritesheet","frameWidth","frameHeight","audio","INITIAL_BOARD_POS","DISTANCE_BETWEEN_SQUARES","move_sound","sound","add","volume","positions","current_player","player_0_valid_squares","Set","player_1_valid_squares","player_0_first_move","player_1_first_move","adjacents","pos_y","pos_x","pos","String","includes","push","setName","setInteractive","text","font","color","current_player_text","input","on","pointer","currentlyOver","clicked_piece","undefined","name","move","render","has","play","current_pos","parseInt","clear","delete","sprite","x","y","set_diff","size","finish_game","setText","a","b","c","filter","winner","tweens","targets","durations","ease","easeParams","delay"],"mappings":"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":["\nimport  React from \"react\";\nimport Phaser from \"phaser\";\n\n//var game_type = null\n\nexport default class GatosCaesEngine extends React.Component {\n\n\n    // constructor(props)  {\n    //     super(props)\n    //     //game_type = props.game_type\n    // }\n\n    componentDidMount() {\n\n        let canvasobj = document.getElementById(\"game_canvas\");\n\n        const config = {\n            canvas: canvasobj,\n            type: Phaser.WEBGL,\n            width: 1100,\n\t\t\theight: 855,\n            backgroundColor: '#4488aa',\n            scene: {\n                preload: this.preload,\n                create: this.create,\n                update: this.update\n            }\n        }\n\n        new Phaser.Game(config);\n\n    }\n\n\n    preload() {\n        this.load.image('square', process.env.PUBLIC_URL + '/game_assets/gatos_caes/square.png')\n\t\tthis.load.spritesheet('cat_dog', process.env.PUBLIC_URL + '/game_assets/gatos_caes/cat_dog.png', { frameWidth: 100, frameHeight: 100 });\n\t\tthis.load.image('center', process.env.PUBLIC_URL + '/game_assets/gatos_caes/center_square.png')\n        this.load.audio('click', [process.env.PUBLIC_URL + '/game_assets/rastros/move.wav']);\n    }\n    \n    create() {\n        var INITIAL_BOARD_POS = 60\n        var DISTANCE_BETWEEN_SQUARES = 105\n        // Sound effect played after every move\n        this.move_sound = this.sound.add('click', {volume: 0.2});\n        // Array that stores the board's clickable positions\n        var positions = []\n        // Player which is currently playing (0 or 1)\n        this.current_player = 0;\t\t\t\t\n\n        this.player_0_valid_squares = new Set()\n        this.player_1_valid_squares = new Set()\n        var player_0_first_move = true\n        var player_1_first_move = true\n\n        var adjacents = new Set()\n\n        // Loop used to fill the board with clickable squares\n        for (var pos_y = 0; pos_y < 8; pos_y++) {\n            for (var pos_x = 0; pos_x < 8; pos_x++) {\n                var pos = pos_y*8+pos_x;\n                this.player_0_valid_squares.add(String(pos))\n                this.player_1_valid_squares.add(String(pos))\n                if ([27, 28, 35, 36].includes(pos)) {\n                    positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*pos_x, INITIAL_BOARD_POS+DISTANCE_BETWEEN_SQUARES*pos_y, 'square').setName(String(pos)).setInteractive());\n                    positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*pos_x, INITIAL_BOARD_POS+DISTANCE_BETWEEN_SQUARES*pos_y, 'center').setName(String(pos)).setInteractive());\n                } else {\n                    positions.push(this.add.image(INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*pos_x, INITIAL_BOARD_POS+DISTANCE_BETWEEN_SQUARES*pos_y, 'square').setName(String(pos)).setInteractive());\n                }\n            }\n        }\n\n        this.add.text(750+20, 60, \"Ã‰ a vez do jogador:\", {font: \"40px Impact\", color: \"Orange\"});\n        var current_player_text = this.add.text(750+95, 120, \"Jogador \" + this.current_player, {font: \"40px Impact\", color: \"Orange\"});\n        \n        // Triggered when the player clicks\n        this.input.on('pointerdown', function(pointer, currentlyOver) {\n            var clicked_piece = currentlyOver[0];\n            if (clicked_piece === undefined) {\n                return\n            }\n            if (player_0_first_move && this.current_player === 0) {\n                if ([\"27\", \"28\", \"35\", \"36\"].includes(clicked_piece.name)) {\n                    player_0_first_move = false;\n                    move(this, adjacents, clicked_piece, current_player_text)\n                }\n            } else if (player_1_first_move && this.current_player === 1) {\n                if (![\"27\", \"28\", \"35\", \"36\"].includes(clicked_piece.name)) {\n                    player_1_first_move = false;\n                    move(this, adjacents, clicked_piece, current_player_text)\n                }\n            } else if (!(player_1_first_move && player_0_first_move)) {\n                move(this, adjacents, clicked_piece, current_player_text)\n            }\n        }, this);\n    }\n    \n    update() {}\n    \n\n    render() {\n        return (\n            <canvas id=\"game_canvas\" />\n        );\n        \n    }\n}\n\n\nfunction move(scene, adjacents, clicked_piece, current_player_text) {\n    if ( (scene.player_0_valid_squares.has(clicked_piece.name) && scene.current_player === 0) \n        || (scene.player_1_valid_squares.has(clicked_piece.name) && scene.current_player === 1) ) {\n        scene.move_sound.play();\n        \n        // Get new square's position [0..49]\n        var current_pos = parseInt(clicked_piece.name)\n\n        adjacents.clear()\n        scene.player_0_valid_squares.delete(String(current_pos))\n        scene.player_1_valid_squares.delete(String(current_pos))\n        adjacents.add(String(current_pos-1))\n        adjacents.add(String(current_pos+1))\n        adjacents.add(String(current_pos-8))\n        adjacents.add(String(current_pos+8))\n\n        // Remove invalid squares (edge cases)\n        if ( [0,1,2,3,4,5,6,7].includes(current_pos) ) {\n            adjacents.delete(String(current_pos-8));\n        }\n\n        if ( [56,57,58,59,60,61,62,63].includes(current_pos) ) {\n            adjacents.delete(String(current_pos+8));\n        }\n\n        if ( [0,8,16,24,32,40,48,56].includes(current_pos) ) {\n            adjacents.delete(String(current_pos-1));\n        }\n\n        if ( [7,15,23,31,39,47,55].includes(current_pos) ) {\n            adjacents.delete(String(current_pos+1));\n        }\n        \n        // Add player piece to new square\n        scene.add.sprite(clicked_piece.x, clicked_piece.y, 'cat_dog', scene.current_player);\n        if (scene.current_player === 0) {\n            scene.player_1_valid_squares = set_diff(scene.player_1_valid_squares, adjacents)\n            if (scene.player_1_valid_squares.size === 0) {\n                finish_game(scene)\n            }\n        } else {\n            scene.player_0_valid_squares = set_diff(scene.player_0_valid_squares, adjacents)\n            if (scene.player_0_valid_squares.size === 0) {\n                finish_game(scene)\n            }\n        }\n        \n        scene.current_player = 1 - scene.current_player\n        current_player_text.setText(\"Jogador \" + scene.current_player);\n\n    }\n    \n\n}\n\n\nfunction set_diff(a, b) {\n    var c = new Set( [...a].filter(x => !b.has(x)) )\n    return c\n}\n\nfunction finish_game(scene) {\n    var winner = scene.current_player\n\n    scene.text = scene.add.text(0, 0, \"O jogador \" + winner + \" ganhou.\", {font: \"80px Impact\", color: \"Red\"});\n    scene.tweens.add ({\n        targets: scene.text,\n        x: 230,\n        y: 270,\n        durations: 2000,\n        ease: \"Elastic\",\n        easeParams: [1.5, 0.5],\n        delay: 0\n    }, scene);\n}\n\n\n/*\n\nfunction AI_move(scene, valid_squares, player_piece, blocked_squares, clicked_piece, last_played, positions, current_player_text) {\n    var INITIAL_BOARD_POS = 60\n\tvar DISTANCE_BETWEEN_SQUARES = 105\n    var AI_square = randomPlay(valid_squares)\n    var poslist = [(AI_square-(AI_square%7))/7, AI_square%7]\n    var pos_x = INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*poslist[1]\n    var pos_y = INITIAL_BOARD_POS + DISTANCE_BETWEEN_SQUARES*poslist[0]\n\n    // Update blocked squares\n    var old_x = (player_piece.x-INITIAL_BOARD_POS)/ DISTANCE_BETWEEN_SQUARES;\n    var old_y = (player_piece.y-INITIAL_BOARD_POS)/ DISTANCE_BETWEEN_SQUARES;\n    blocked_squares.add(String(old_y*7+old_x));\n\n    // Remove last movement highlight and add new one\n    last_played.forEach(pos =>  positions[pos].clearTint());\n    last_played.clear();\n    last_played.add(old_y*7+old_x);\n    last_played.add(parseInt(clicked_piece.name));\n    last_played.forEach(pos =>  positions[pos].setTint(0xFFFF00));\n\n    // Move player piece to new square\n    move_image(scene, player_piece, pos_x, pos_y);\n\n    \n    // Get new square's position [0..49]\n    var current_pos = parseInt(AI_square)\n    valid_squares.clear()\n\n    // Add all possible positions\n    valid_squares.add(String(current_pos-6));\n    valid_squares.add(String(current_pos-7));\n    valid_squares.add(String(current_pos-8));\n\n    valid_squares.add(String(current_pos+6));\n    valid_squares.add(String(current_pos+7));\n    valid_squares.add(String(current_pos+8));\n\n    valid_squares.add(String(current_pos-1));\n    valid_squares.add(String(current_pos+1));\n    \n    // Remove invalid squares (edge cases)\n    if ( [0,1,2,3,4,5,6].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-6));\n        valid_squares.delete(String(current_pos-7));\n        valid_squares.delete(String(current_pos-8));\n    }\n\n    if ( [42,43,44,45,46,47,48].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos+6));\n        valid_squares.delete(String(current_pos+7));\n        valid_squares.delete(String(current_pos+8));\n    }\n\n    if ( [0,7,14,21,28,35,42].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-8));\n        valid_squares.delete(String(current_pos-1));\n        valid_squares.delete(String(current_pos+6));\n    }\n\n    if ( [6,13,20,27,34,41,48].includes(current_pos) ) {\n        valid_squares.delete(String(current_pos-6));\n        valid_squares.delete(String(current_pos+1));\n        valid_squares.delete(String(current_pos+8));\n    }\n\n    // Remove blocked squares\n    blocked_squares.forEach(square => valid_squares.delete(square));\n\n    // Check for win conditions\n    if (current_pos === 6 || current_pos === 42 || set_diff(valid_squares, blocked_squares).size === 0) {\n        finish_game(scene, current_pos);\n        valid_squares.clear();\n    } else {\n        if (scene.current_player===1)\n            scene.current_player=2;\n        else\n            scene.current_player=1;\n        \n        current_player_text.setText(\"Jogador \" + scene.current_player);\n    }\n}\n\nfunction randomPlay(validSquares) {\n    var tmpSquares = Array.from(validSquares).map(x => [(parseInt(x)-(parseInt(x)%7))/7, parseInt(x)%7]);\n    var chosen = tmpSquares.reduce((accumulator, current) => {\n        if (Math.pow(accumulator[0]-0, 2) + Math.pow(accumulator[1] - 6, 2) < Math.pow(current[0]-0, 2) + Math.pow(current[1] - 6, 2)) {\n            return accumulator;\n        } else {\n            return current;\n        }\n    });\n   // this.fieldUpdate(chosen);\n    return chosen[0]*7+chosen[1];\n}\n\n*/"]},"metadata":{},"sourceType":"module"}